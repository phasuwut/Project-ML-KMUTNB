# -*- coding: utf-8 -*-
"""mask_Colab_darknet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nvfD9vY2wiOElB0DFFrreOkRKIupiCyc

[YOLO ON COLAB](http://blog.ibanyez.info/download/B20190410T000000072.png)

## Mount Data from Google Drive 

 add this link to your google drive: https://drive.google.com/drive/folders/1tj4iJy_buQi9cngLg9zyEj4BXOX577mU?usp=sharing
"""

## mount google drive 
from google.colab import drive
drive.mount('/content/gdrive')

!ls -la "/content/gdrive/My Drive/darknet"

## check cuda version 
!/usr/local/cuda/bin/nvcc --version

## unzip cuDNN for Nvidia deep learning 
!tar -xzvf gdrive/My\ Drive/darknet/cuDNN/cudnn-10.0-linux-x64-v7.5.0.56.tgz -C /usr/local/
!chmod a+r /usr/local/cuda/include/cudnn.h

"""## Copy Darknet compiled version to Colab"""

# Commented out IPython magic to ensure Python compatibility.
# Makes a dir for darknet and move there
!mkdir darknet
# %cd darknet
# Copy the Darkent compiled version to the VM local drive
!cp /content/gdrive/My\ Drive/darknet/bin/darknet ./darknet
#!cp -R /content/gdrive/My\ Drive/darknet/bin/darknet ./
# Set execution permissions to Darknet
!chmod +x ./darknet

"""## For testing darknet"""

!wget https://pjreddie.com/media/files/yolov3.weights
!wget https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg

!./darknet detector test /content/gdrive/My\ Drive/darknet/coco.data yolov3.cfg yolov3.weights test.jpg

"""## For training darknet"""

# Train darknet 
#!./darknet detector train "/content/gdrive/My Drive/darknet/obj.data" "/content/gdrive/My Drive/darknet/cfg/yolov3.cfg" "/content/gdrive/My Drive/darknet/weights/darknet53.conv.74" -dont_show 

# Start training at the point where the last runtime finished
!./darknet detector train "/content/gdrive/My Drive/darknet/obj.data" "/content/gdrive/My Drive/darknet/cfg/yolov3.cfg" "/content/gdrive/My Drive/darknet/backup/yolov3_last.weights" -dont_show

"""## Command test yolo"""

!./darknet detector test /content/gdrive/My\ Drive/darknet/obj.data /content/gdrive/My\ Drive/darknet/cfg/yolov3.cfg /content/gdrive/My\ Drive/darknet/backup/yolov3_last.weights /content/gdrive/My\ Drive/darknet/img/img_655.jpg
#!./darknet detector test /content/gdrive/My\ Drive/darknet/obj.data /content/gdrive/My\ Drive/darknet/cfg/yolov3.cfg /content/gdrive/My\ Drive/darknet/backup/yolov3_last.weights /content/gdrive/My\ Drive/darknet/test/test_1.jpg

"""## Code for using YOLO with openCV"""

import cv2
import numpy as np

def get_output_layers(net):    
    layer_names = net.getLayerNames()    
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
    return output_layers


def draw_prediction(img, class_id, confidence, x, y, x_plus_w, y_plus_h):
    label = str(classes[class_id])
    color = COLORS[class_id]
    cv2.rectangle(img, (x,y), (x_plus_w,y_plus_h), color, 1)
    cv2.putText(img, label, (x-10,y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

##  read input image
image = cv2.imread("/content/gdrive/My Drive/darknet/img/img_650.jpg")
#image = cv2.imread("/content/gdrive/My Drive/darknet/test/test_4.jpg")

Width = image.shape[1]
Height = image.shape[0]

## read object class name 
classes = None
with open("/content/gdrive/My Drive/darknet/obj.names", 'r') as f:
    classes = [line.strip() for line in f.readlines()]

##  random boundingbox colors for each object label  
COLORS = np.random.uniform(0, 255, size=(len(classes), 3))

## read yolo's weights
net = cv2.dnn.readNet("/content/gdrive/My Drive/darknet/backup/yolov3_last.weights", "/content/gdrive/My Drive/darknet/cfg/yolov3.cfg")

##  preprocessing image 
blob = cv2.dnn.blobFromImage(image, 0.00392 , (608, 608), True, crop=False)
net.setInput(blob)

## object detection process 
outs = net.forward(get_output_layers(net))

class_ids = []
confidences = []
boxes = []
conf_threshold = 0.5                   ### confidence threshold 
nms_threshold = 0.4                    ### non maximum supression threshold 

for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > conf_threshold:
            center_x = int(detection[0] * Width)
            center_y = int(detection[1] * Height)
            w = int(detection[2] * Width)
            h = int(detection[3] * Height)
            x = center_x - w / 2
            y = center_y - h / 2
            class_ids.append(class_id)
            confidences.append(float(confidence))
            boxes.append([x, y, w, h])


indices = cv2.dnn.NMSBoxes(boxes, confidences, conf_threshold, nms_threshold)

for i in indices:
    i = i[0]
    box = boxes[i]
    x = box[0] 
    y = box[1]
    w = box[2]
    h = box[3]
    draw_prediction(image, class_ids[i], confidences[i], round(x), round(y), round(x+w), round(y+h))

################################## detected image ###############################################
from google.colab.patches import cv2_imshow
cv2_imshow(image)